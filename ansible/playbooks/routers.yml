# Configures the routers
- name: Configure OpenWRT Router
  hosts: router
  gather_facts: false
  vars:
    secrets: "{{ lookup('community.sops.sops', 'sops_secrets.yaml') | from_yaml }}"
    wifi_password: "{{ secrets.wifi_password }}"

    wifi_devices:
      - name: wireless.radio0
        band: '5g'
        channel: '36'
      - name: wireless.radio1
        band: '2g'
        channel: '1'
    wifi_interfaces:
      - name: wireless.default_radio0
        device: 'radio0'
      - name: wireless.default_radio1
        device: 'radio1'
  roles:
    - role: gekmihesg.openwrt
  tasks:
    - name: Ensure required packages are installed
      community.general.opkg:
        name: "{{ item }}"
        state: present
      loop:
        - luci
        - luci-app-firewall
        - wireguard-tools

    - name: Configure WAN
      uci:
        command: set
        key: network.wan
        value:
          peerdns: '0'
          dns:
            - "{{ hostvars['mars']['ansible_host'] }}"

    - name: Ensure that VLAN1 exists
      block:
        - name: Get VLAN1
          uci:
            command: get
            key: network.@switch_vlan[0]
          register: vlan1_exists
      rescue:
        - name: Add VLAN 1 if it doesn't exist
          uci:
            command: add
            key: network.switch_vlan
          when: "vlan1_exists.result == 'uci: Entry not found'"

    - name: Configure VLAN 1 (non-vpn LAN)
      uci:
        command: set
        key: network.@switch_vlan[0]
        value:
          device: 'switch0'
          vlan: '1'
          ports: '2 3 4 5 0t'

    - name: Ensure that VLAN2 exists
      block:
        - name: Get VLAN2
          uci:
            command: get
            key: network.@switch_vlan[1]
          register: vlan2_exists
      rescue:
        - name: Add VLAN 2 if it doesn't exist
          uci:
            command: add
            key: network.switch_vlan
          when: "vlan2_exists.result == 'uci: Entry not found'"

    - name: Configure VLAN 2 (WAN)
      uci:
        command: set
        key: network.@switch_vlan[1]
        value:
          device: 'switch0'
          vlan: '2'
          ports: '1 0t'
    
    - name: Ensure that VLAN3 exists
      block:
        - name: Get VLAN3
          uci:
            command: get
            key: network.@switch_vlan[2]
          register: vlan3_exists
      rescue:
        - name: Add VLAN 3 if it doesn't exist
          uci:
            command: add
            key: network.switch_vlan
          when: "vlan3_exists.result == 'uci: Entry not found'"

    - name: Configure VLAN 3 (VPN LAN)
      uci:
        command: set
        key: network.@switch_vlan[2]
        value:
          device: 'switch0'
          vlan: '3'
          ports: '2t 3t 4t 5t 0t'

    - name: Configure wifi device
      uci:
        command: set
        key: "{{ wifi.name }}"
        value:
          type: 'mac80211'
          band: "{{ wifi.band }}"
          channel: "{{ wifi.channel }}"
          disabled: '0'
      loop: "{{ wifi_devices }}"
      loop_control:
        loop_var: wifi
        label: "{{ wifi.name }}"

    - name: Configure wifi interface
      uci:
        command: set
        key: "{{ wifi.name }}"
        value:
          device: "{{ wifi.device }}"
          network: 'lan'
          mode: 'ap'
          ssid: '@xxxx[]::::::::::::::::::::::::>'
          encryption: 'psk2'
          disabled: '0'
      loop: "{{ wifi_interfaces }}"
      loop_control:
        loop_var: wifi
        label: "{{ wifi.name }}"

    - name: Set wifi password
      uci:
        command: set
        key: "{{ wifi.name }}"
        value:
          key: "{{ wifi_password }}"
      loop: "{{ wifi_interfaces }}"
      loop_control:
        loop_var: wifi
        label: "{{ wifi.name }}"
      no_log: true

    - name: Commit UCI changes
      uci:
        command: commit
      notify: reload wifi
